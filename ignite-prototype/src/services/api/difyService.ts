import type { DifyAPIRequest, DifyAPIResponse } from '@/types'
import { logError } from '@/utils/errorHandler'

/**
 * Calls the Dify API to get inspiration based on lyrics (blocking mode)
 * @param lyrics - The current lyrics to generate inspiration from
 * @returns The inspiration text from the API
 * @throws Error if the API call fails
 */
export const fetchDifyInspiration = async (lyrics: string): Promise<string> => {
  try {
    console.log('üöÄ [DifyAPI] „Éñ„É≠„ÉÉ„Ç≠„É≥„Ç∞APIÂëº„Å≥Âá∫„ÅóÈñãÂßã')
    console.log('üìù [DifyAPI] ÂÖ•ÂäõÊ≠åË©û:', lyrics.substring(0, 100) + (lyrics.length > 100 ? '...' : ''))
    
    const apiUrl = `${import.meta.env.VITE_DIFY_API_BASE_URL}/workflows/run`
    const apiKey = import.meta.env.VITE_DIFY_API_KEY
    
    if (!apiUrl || !apiKey) {
      console.error('‚ùå [DifyAPI] APIË®≠ÂÆö‰∏çË∂≥: Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
      throw new Error('API configuration missing. Check environment variables.')
    }
    
    const requestBody: DifyAPIRequest = {
      inputs: {
        currentLyric: lyrics || 'Ê≠åË©û„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
      },
      response_mode: 'blocking',
      user: 'user-' + Date.now()
    }
    
    console.log('üì§ [DifyAPI] „É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°:', JSON.stringify(requestBody, null, 2))

    let response
    try {
      response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })
      
      console.log(`üîÑ [DifyAPI] „É¨„Çπ„Éù„É≥„Çπ„Çπ„ÉÜ„Éº„Çø„Çπ: ${response.status} ${response.statusText}`)
    } catch (error) {
      console.error('‚ùå [DifyAPI] „Éï„Çß„ÉÉ„ÉÅ„Ç®„É©„Éº:', error)
      throw error
    }

    if (!response.ok) {
      console.error(`‚ùå [DifyAPI] API„Ç®„É©„Éº: ${response.status} ${response.statusText}`)
      const errorData = await response.json()
      console.error('‚ùå [DifyAPI] „Ç®„É©„ÉºË©≥Á¥∞:', errorData)
      throw new Error(`API error: ${response.status} - ${JSON.stringify(errorData)}`)
    }

    console.log('üì• [DifyAPI] „É¨„Çπ„Éù„É≥„ÇπJSON„ÅÆËß£ÊûêÈñãÂßã')
    const data = await response.json() as DifyAPIResponse
    
    if (data.data?.outputs?.result) {
      const result = data.data.outputs.result
      console.log(`‚úÖ [DifyAPI] ÁµêÊûúÂèñÂæóÊàêÂäü: ${result.substring(0, 100)}${result.length > 100 ? '...' : ''}`)
      return result
    } else {
      console.error('‚ùå [DifyAPI] ÁÑ°Âäπ„Å™„É¨„Çπ„Éù„É≥„ÇπÂΩ¢Âºè:', data)
      throw new Error('Invalid response format')
    }
  } catch (error) {
    console.error('‚ùå [DifyAPI] „Ç®„É©„ÉºÁô∫Áîü:', error)
    logError('DifyAPI', error)
    throw error
  }
}

/**
 * „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞„ÅßDify API„ÇíÂëº„Å≥Âá∫„Åó„ÄÅÈÄêÊ¨°„Éá„Éº„Çø„Çí„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅßËøî„Åô
 * @param lyrics - „É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥ÁîüÊàê„ÅÆÂÖÉ„Å®„Å™„ÇãÊ≠åË©û
 * @param onChunk - ÂêÑ„ÉÅ„É£„É≥„ÇØÂèó‰ø°ÊôÇ„Å´Âëº„Å∞„Çå„Çã„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞
 */
export const fetchDifyInspirationStream = async (
  lyrics: string,
  onChunk: (chunk: string, isFinal?: boolean) => void
): Promise<void> => {
  console.log('üöÄ [DifyAPI] „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞APIÂëº„Å≥Âá∫„ÅóÈñãÂßã')
  console.log('üìù [DifyAPI] ÂÖ•ÂäõÊ≠åË©û:', lyrics.substring(0, 100) + (lyrics.length > 100 ? '...' : ''))
  
  const apiUrl = `${import.meta.env.VITE_DIFY_API_BASE_URL}/workflows/run`
  const apiKey = import.meta.env.VITE_DIFY_API_KEY
  
  if (!apiUrl || !apiKey) {
    console.error('‚ùå [DifyAPI] APIË®≠ÂÆö‰∏çË∂≥: Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
    throw new Error('API configuration missing. Check environment variables.')
  }
  
  const requestBody: DifyAPIRequest = {
    inputs: {
      currentLyric: lyrics || 'Ê≠åË©û„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
    },
    response_mode: 'streaming',
    user: 'user-' + Date.now()
  }
  
  console.log('üì§ [DifyAPI] „É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°:', JSON.stringify(requestBody, null, 2))
  
  let response
  try {
    response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    })
    
    console.log(`üîÑ [DifyAPI] „É¨„Çπ„Éù„É≥„Çπ„Çπ„ÉÜ„Éº„Çø„Çπ: ${response.status} ${response.statusText}`)
  } catch (error) {
    console.error('‚ùå [DifyAPI] „Éï„Çß„ÉÉ„ÉÅ„Ç®„É©„Éº:', error)
    throw error
  }
  
  if (!response.ok) {
    console.error(`‚ùå [DifyAPI] API„Ç®„É©„Éº: ${response.status} ${response.statusText}`)
    const errorData = await response.json()
    console.error('‚ùå [DifyAPI] „Ç®„É©„ÉºË©≥Á¥∞:', errorData)
    throw new Error(`API error: ${response.status} - ${JSON.stringify(errorData)}`)
  }
  
  console.log('üì• [DifyAPI] „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞ÈñãÂßã')
  
  // „Çπ„Éà„É™„Éº„É†„ÅÆË™≠„ÅøÂèñ„ÇäÈñãÂßã
  const reader = response.body?.getReader()
  if (!reader) {
    console.error('‚ùå [DifyAPI] Readable stream„Åå„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
    throw new Error('Readable stream is not supported in this environment.')
  }
  
  const decoder = new TextDecoder('utf-8')
  let buffer = ''
  let chunkCount = 0
  let lastContent = ''
  
  // UUID„Éë„Çø„Éº„É≥Ôºà‰æã: 8bb6df6f-d3d4-482e-90d5-6c57437f3316Ôºâ
  const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/;
  
  // UUID„ÇíÂâäÈô§„Åô„ÇãÈñ¢Êï∞
  const removeUuid = (text: string): string => {
    if (uuidPattern.test(text)) {
      const cleaned = text.replace(uuidPattern, '');
      console.log(`üîç [DifyAPI] UUID„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
      return cleaned;
    }
    return text;
  };
  
  // ÊúÄÁµÇÁµêÊûú„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö„Åô„ÇãÈñ¢Êï∞
  const isFinalResult = (eventData: any): boolean => {
    // workflow_finished„Ç§„Éô„É≥„Éà„ÅØÊúÄÁµÇÁµêÊûú„ÇíÁ§∫„Åô
    if (eventData.event === 'workflow_finished') {
      console.log('üèÅ [DifyAPI] workflow_finished„Ç§„Éô„É≥„ÉàÊ§úÂá∫ - ÊúÄÁµÇÁµêÊûú„Å®„Åó„Å¶Âá¶ÁêÜ„Åó„Åæ„Åô')
      return true
    }
    
    // node_finished„Ç§„Éô„É≥„Éà„Åß„ÄÅÊúÄÂæå„ÅÆ„Éé„Éº„Éâ„ÅÆÂ†¥Âêà„ÇÇÊúÄÁµÇÁµêÊûú„Å®Ë¶ã„Å™„Åô
    if (eventData.event === 'node_finished' && eventData.data?.status === 'succeeded') {
      // ÈÄöÂ∏∏„ÄÅÊúÄÂæå„ÅÆ„Éé„Éº„Éâ„ÅØoutputs„ÇíÊåÅ„Å£„Å¶„ÅÑ„Çã
      if (eventData.data?.outputs && Object.keys(eventData.data.outputs).length > 0) {
        console.log('üèÅ [DifyAPI] ÊúÄÁµÇ„Éé„Éº„ÉâÂÆå‰∫Ü„Ç§„Éô„É≥„ÉàÊ§úÂá∫ - ÊúÄÁµÇÁµêÊûú„Å®„Åó„Å¶Âá¶ÁêÜ„Åó„Åæ„Åô')
        return true
      }
    }
    
    return false
  };
  
  // „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞„Éá„Éº„Çø„ÇíÈÄêÊ¨°Ë™≠„ÅøÂèñ„Çã
  while (true) {
    try {
      const { done, value } = await reader.read()
      
      if (done) {
        console.log('‚úÖ [DifyAPI] „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞ÂÆå‰∫Ü')
        break
      }
      
      const chunk = decoder.decode(value, { stream: true })
      buffer += chunk
      
      console.log(`üì¶ [DifyAPI] „Éê„Ç§„Éä„É™„ÉÅ„É£„É≥„ÇØÂèó‰ø° #${++chunkCount}: ${value.length} bytes`)
      
      // „Ç§„Éô„É≥„Éà„ÅØ "\n\n" „ÅßÂå∫Âàá„Çâ„Çå„Çã
      const parts = buffer.split('\n\n')
      buffer = parts.pop() || ''
      
      console.log(`üîç [DifyAPI] „Ç§„Éô„É≥„ÉàÂàÜÂâ≤: ${parts.length}ÂÄã„ÅÆ„Ç§„Éô„É≥„ÉàÊ§úÂá∫`)
      
      for (const part of parts) {
        // "data:" Ë°å„ÅÆ„ÅøÊäΩÂá∫
        const lines = part.split('\n').filter(line => line.startsWith('data:'))
        
        for (const line of lines) {
          const jsonStr = line.slice(5).trim() // "data:" „ÇíÈô§Âéª
          console.log(`üìÑ [DifyAPI] SSE„Éá„Éº„ÇøÂèó‰ø°: ${jsonStr.substring(0, 100)}${jsonStr.length > 100 ? '...' : ''}`)
          
          try {
            const eventData = JSON.parse(jsonStr)
            console.log('üîÑ [DifyAPI] „Ç§„Éô„É≥„Éà„Çø„Ç§„Éó:', eventData.event || 'unknown')
            
            let result = null
            
            if (eventData.data?.result) {
              result = eventData.data.result
              console.log('‚ú® [DifyAPI] data.resultÊ§úÂá∫')
            } else if (eventData.data?.answer) {
              result = eventData.data.answer
              console.log('‚ú® [DifyAPI] data.answerÊ§úÂá∫')
            } else if (eventData.result) {
              result = eventData.result
              console.log('‚ú® [DifyAPI] resultÊ§úÂá∫')
            } else if (eventData.answer) {
              result = eventData.answer
              console.log('‚ú® [DifyAPI] answerÊ§úÂá∫')
            } else if (eventData.data?.outputs?.answer) {
              result = eventData.data.outputs.answer
              console.log('‚ú® [DifyAPI] data.outputs.answerÊ§úÂá∫')
            } else if (eventData.data?.outputs?.result) {
              result = eventData.data.outputs.result
              console.log('‚ú® [DifyAPI] data.outputs.resultÊ§úÂá∫')
            } else if (eventData.data?.output?.answer) {
              result = eventData.data.output.answer
              console.log('‚ú® [DifyAPI] data.output.answerÊ§úÂá∫')
            } else if (eventData.data?.output?.result) {
              result = eventData.data.output.result
              console.log('‚ú® [DifyAPI] data.output.resultÊ§úÂá∫')
            } else if (eventData.data?.text) {
              result = eventData.data.text
              console.log('‚ú® [DifyAPI] data.textÊ§úÂá∫')
            } else if (eventData.data?.content) {
              result = eventData.data.content
              console.log('‚ú® [DifyAPI] data.contentÊ§úÂá∫')
            }
            
            if (result) {
              // UUID„ÇíÂâäÈô§
              result = removeUuid(result);
              
              // ÊúÄÁµÇÁµêÊûú„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
              const final = isFinalResult(eventData);
              
              // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ - ÂâçÂõû„Å®Âêå„ÅòÂÜÖÂÆπ„Å™„ÇâÈÄÅ‰ø°„Åó„Å™„ÅÑ
              if (result !== lastContent && result.trim()) {
                console.log(`üì§ [DifyAPI] „ÉÅ„É£„É≥„ÇØÈÄÅ‰ø°: ${result.substring(0, 50)}${result.length > 50 ? '...' : ''} ${final ? '(ÊúÄÁµÇÁµêÊûú)' : ''}`)
                lastContent = result;
                onChunk(result, final)
              } else {
                console.log(`‚è≠Ô∏è [DifyAPI] ÈáçË§á„Åæ„Åü„ÅØÁ©∫„ÅÆ„ÉÅ„É£„É≥„ÇØ„Çí„Çπ„Ç≠„ÉÉ„Éó`)
              }
            } else {
              console.log('‚ö†Ô∏è [DifyAPI] ÁµêÊûú„Éï„Ç£„Éº„É´„Éâ„Å™„Åó:', eventData)
              // Ë©≥Á¥∞„Å™„Éá„Éº„ÇøÊßãÈÄ†„Çí„É≠„Ç∞„Å´Âá∫Âäõ
              if (eventData.data) {
                console.log('üìä [DifyAPI] dataÊßãÈÄ†:', JSON.stringify(eventData.data, null, 2))
              }
              
              // node_finished„Ç§„Éô„É≥„Éà„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
              if (eventData.event === 'message' || eventData.event === 'node_finished') {
                if (eventData.data && typeof eventData.data === 'object') {
                  // data„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆ‰∏≠„Åã„ÇâÊñáÂ≠óÂàó„Éï„Ç£„Éº„É´„Éâ„ÇíÊé¢„Åô
                  for (const [key, value] of Object.entries(eventData.data)) {
                    if (typeof value === 'string' && value.trim().length > 0) {
                      console.log(`‚ú® [DifyAPI] data.${key}Ê§úÂá∫:`, value)
                      // UUID„ÇíÂâäÈô§„Åó„Å¶ÈÄÅ‰ø°
                      const cleanedValue = removeUuid(value);
                      if (cleanedValue !== lastContent) {
                        lastContent = cleanedValue;
                        onChunk(cleanedValue)
                      }
                      break
                    } else if (value && typeof value === 'object') {
                      // „Éç„Çπ„Éà„Åï„Çå„Åü„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆ‰∏≠„ÇÇÊé¢„Åô
                      for (const [nestedKey, nestedValue] of Object.entries(value)) {
                        if (typeof nestedValue === 'string' && nestedValue.trim().length > 0) {
                          console.log(`‚ú® [DifyAPI] data.${key}.${nestedKey}Ê§úÂá∫:`, nestedValue)
                          // UUID„ÇíÂâäÈô§„Åó„Å¶ÈÄÅ‰ø°
                          const cleanedValue = removeUuid(nestedValue);
                          if (cleanedValue !== lastContent) {
                            lastContent = cleanedValue;
                            onChunk(cleanedValue)
                          }
                          break
                        }
                      }
                    }
                  }
                }
              }
            }
          } catch (error) {
            console.error('‚ùå [DifyAPI] JSON„Éë„Éº„Çπ„Ç®„É©„Éº:', error)
            console.error('‚ùå [DifyAPI] ÂïèÈ°å„ÅÆJSON„Éá„Éº„Çø:', jsonStr)
          }
        }
      }
    } catch (error) {
      console.error('‚ùå [DifyAPI] „Çπ„Éà„É™„Éº„É†Ë™≠„ÅøÂèñ„Çä„Ç®„É©„Éº:', error)
      throw error
    }
  }
}
